@using GrinHome.Data
@using GrinHome.Data.Models





<div class="card" style="width:100%">
    <div class="card-header">
        @Title
    </div>
    <div class="card-body p-2">
        <RadzenChart>
            <RadzenLineSeries Smooth=false Data="@Value" CategoryProperty="Date" Title="@Name" LineType="LineType.Solid" ValueProperty="Value">
                <RadzenMarkers MarkerType="MarkerType.None" />
            </RadzenLineSeries>
            @if (ValueOld.Any())
            {
                <RadzenLineSeries Smooth=false Data="@ValueOld" CategoryProperty="Date" Title="@Name" LineType="LineType.Dashed" StrokeWidth="1" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.None" />
                </RadzenLineSeries>
            }
            <RadzenCategoryAxis Padding="20" FormatString=@AxisXFormat />
            <RadzenValueAxis FormatString="{0:N1}">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="" />
            </RadzenValueAxis>
            <RadzenLegend Visible="false" />
        </RadzenChart>
    </div>
</div>



@code {
    [Parameter] public SensorValue[] Value { get; set; } = Array.Empty<SensorValue>();
    [Parameter] public SensorValue[] ValueOld { get; set; } = Array.Empty<SensorValue>();
    [Parameter] public float Min { get; set; } = 0;
    [Parameter] public float Max { get; set; } = 100;
    [Parameter] public float LimitMin { get; set; } = 0;
    [Parameter] public float LimitMax { get; set; } = 100;
    [Parameter] public string Name { get; set; } = "";
    [Parameter] public string Unit { get; set; } = "";

    private float? Average = null;
    private float? AverageOld = null;
    private string Title = "";

    [Parameter]
    public DataGraph ValueShown
    {
        set
        {
            Value = value.Data.ToArray();
            ValueOld = value.DataOld.ToArray();
            if (value.ValueDefinition != null)
            {
                Name = value.ValueDefinition.Name;
                Unit = value.ValueDefinition.DataType.Unit;
                Min = value.ValueDefinition.Min;
                Max = value.ValueDefinition.Max;
                LimitMin = value.ValueDefinition.LimitMin;
                LimitMax = value.ValueDefinition.LimitMax;
            }
            double hours = Value.Any() ? (Value.Last().Date - Value.First().Date).TotalHours : 24;

            Average = Value.Any() ? Value.Select(x => x.Value).Average() : null;
            AverageOld = ValueOld.Any() ? ValueOld.Select(x => x.Value).Average() : null;

            if (hours < 24)
                AxisXFormat = "{0:HH:mm}";
            else
                AxisXFormat = "{0:dd MMM HH:mm}";

            if (Average == null && AverageOld == null)
                Title = $"{Name}";
            else if (Average != null && AverageOld == null)
                Title = $"{Name} (Avg: {Average:N1} [{Unit}])";
            else if (Average == null && AverageOld != null)
                Title = $"{Name} (Avg: {AverageOld:N1} [{Unit}])";
            else
                Title = $"{Name} (Avg: {Average:N1} [{Unit}] / Avg: {AverageOld:N1} [{Unit}])";
        }
    }

    private string AxisXFormat = "{0:HH:mm}";


}
